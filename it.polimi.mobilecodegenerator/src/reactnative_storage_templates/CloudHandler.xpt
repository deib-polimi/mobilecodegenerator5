«IMPORT metamodel»

«DEFINE main FOR Application-»
«IF dataHandler != null && dataHandler.cloudHandler != null-»
«EXPAND cloudHandler FOR dataHandler.cloudHandler-»
«ENDIF-»
«ENDDEFINE-»

«DEFINE cloudHandler FOR CloudHandler-»
«FILE dataHandler.application.name + "/storage/CloudHandler.js"-»
import firebase from 'firebase';

class CloudHandlerImpl {

	constructor() {
		this.remote = firebase.database();
		this.listenerCache = {};
	}
	
	readOnce(refStr) {
		return new Promise(resolve => {
			this.db
				.ref(refStr)
				.once('value', snapshot => {
					resolve(snapshot.val());
				});
		});
	}
	
	read(refStr, callback) {
		this.db
			.ref(refStr)
			.on('value', snapshot => {
				callback(snapshot.val());
			});
		return this;
	}
	
	readList(refStr, callback) {
		this.db
			.ref(refStr)
			.on('child_added', snapshot => {
				callback(snapshot.val(), snapshot.key);
			})
			.on('child_changed', snapshot => {
				callback(snapshot.val(), snapshot.key);
			})
			.on('child_removed', snapshot => {
				callback(null, snapshot.key);
			});
	}
	
	update(refStr, updates) {
		this.db
			.ref(refStr)
			.update(updates);
		return this;
	}
	
	insert(refStr, data, id = null, done = () => {}) {
		if (id) {
			this.db
				.ref(refStr)
				.child(id)
				.set(data, done);
			return id;
		} else {
			return this.db
				.ref(refStr)
				.push(data, done)
				key;
		}
	}
	
	delete(refStr, done = () => {}) {
		this.db
			.ref(refStr)
			.set(null, done);
	}
	
	raw() {
		return this.db;
	}
	
	ref(refStr) {
		return this.db.ref(refStr);
	}

}

export default new CloudHandlerImpl();
«ENDFILE-»
«ENDDEFINE-»
