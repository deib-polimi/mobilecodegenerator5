«IMPORT metamodel»

«EXTENSION app_extensions::Java»

«DEFINE main FOR Application-»
«IF dataHandler.databaseHandler != null-»
«EXPAND database FOR dataHandler.databaseHandler-»
«ENDIF-»
«ENDDEFINE-»

«DEFINE database FOR DatabaseHandler-»
«FILE dataHandler.application.name + "/storage/DatabaseHandler.js"-»
import SQLite from 'react-native-sqlite-storage';
import DatabaseSetupHelper from './DatabaseSetupHelper';
«FOREACH entities AS ent-»
import { «ent.name.toFirstUpper()-»Store } from './entities/«ent.name.toFirstUpper()-»';
«ENDFOREACH-»
SQLite.enablePromise(true);

let DB = null;


function makeInsertRel(tableName, myId, otherIds) {
	if (otherIds.length === 0) {
		return "";
	}
	let query = 'INSERT INTO ' + tableName + ' VALUES ';
	query += otherIds.map(oId => {
		return '("' + myId + '","' + oId + '")';
	}).join(',');
	return query;
}

class DatabaseHandlerImpl {

	constructor(handle) {
		this.db = handle;
		this.stores = {};
	}
	
	run(queries) {
		let results = [];
		return this.db.transaction(tx => {
			queries.forEach((query, i) => {
				if (query != "") {
					tx.executeSql(query).then(([tx, result]) => results[i] = result);
				}
			});
		}).then(() => results);
	}
	
	«FOREACH entities AS e -»
	async getStoreFor«e.name.toFirstUpper()»() {
		if (!this.stores.«e.name») {
			this.stores.«e.name» = await new «e.name.toFirstUpper()»Store(this).init();
		}
		return this.stores.«e.name»;
	}
	«ENDFOREACH -»

}

export default function getDB() {
	if (DB === null) {
		return SQLite.openDatabase({
			name: 'appdb.db',
			location: 'Documents',
			readOnly: false,
		}).then(db => {
			const setupHelper = new DatabaseSetupHelper(db);
			return setupHelper.ensureInit().then(() => db);
		}).then(db => {
			DB = new DatabaseHandlerImpl(db);
			return DB;
		});
	} else {
		return Promise.resolve(DB);
	}
}
«ENDFILE-»
«ENDDEFINE-»