«IMPORT metamodel»

«DEFINE main FOR Application-»
«IF dataHandler.databaseHandler != null-»
«EXPAND setupHelper FOR dataHandler.databaseHandler-»
«ENDIF-»
«ENDDEFINE-»


«REM»
	In order to establish a foreign key constraint, we must have created the referenced table before
	Hence, we can either sort tables like a topological graph sorting basing on references relation,
	or create all tables without rels and add rels right after
«ENDREM»
«DEFINE setupHelper FOR DatabaseHandler-»
«FILE dataHandler.application.name + "/storage/DatabaseSetupHelper.js"-»
export default class DatabaseSetupHelper {

	constructor(db) {
		this.db = db;
	}
	
	ensureInit() {
		return this.mustInitialize().then(mustInit => {
			if (mustInit) {
				this.init();
			}
		});
	}
	
	mustInitialize() {
		let query = 'SELECT tbl_name FROM sqlite_master WHERE tbl_name="MetaTable"';
		return this.db.executeSql(query).then(([result]) => {
			if (result.rows.length == 0) {
				return true;
			} else {
				console.log(result.rows.item(0))
				return false;
			}
		}, () => true);
	}
	
	init() {
		this.db.executeSql('CREATE TABLE MetaTable(pk TEXT PRIMARY KEY) WITHOUT ROWID');
		«EXPAND createTable FOREACH entities-»
	}

}
«ENDFILE-»
«ENDDEFINE-»

«DEFINE createTable FOR Entity-»
	this.db.executeSql(`CREATE TABLE TBL_«name-»(
		«primaryKey-» TEXT PRIMARY KEY
		
		«REM»Generate attributes«ENDREM»
		«IF entityAttributes.size > 0»,«ENDIF»
		«FOREACH entityAttributes AS attr SEPARATOR ",\n"-»
		«LET attr.type.toLowerCase() AS t»
		«IF t.matches("integer") || t.matches("boolean")-»
		«attr.name-» INT
		«ELSEIF t.matches("string") || t.matches("date")-»
		«attr.name-» TEXT
		«ELSEIF t.matches("float") || t.matches("double")-»
		«attr.name-» REAL
		«ENDIF-»
		«ENDLET»
		«ENDFOREACH-»
		
		«REM»Generate 1:1 and N:1 relations that have this entity as source«ENDREM»
		«LET entityRelationships.select(e|e.type.matches("1 : 1") || e.type.matches("N : 1")) AS rels -»
		«IF rels.size > 0»,«ENDIF»
		«FOREACH rels AS rel SEPARATOR ",\n" -»
		rel«rel.destination.toFirstUpper()»«rel.name.toFirstUpper()» TEXT
		«ENDFOREACH -»
		«ENDLET -»
		
		«REM»Generate 1:N relations that have this entity as destination«ENDREM»
		«LET databaseHandler.entities.entityRelationships.select(e|e.type.matches("1 : N") && e.destination == name) AS rels -»
		«IF rels.size > 0»,«ENDIF»
		«FOREACH rels AS rel SEPARATOR ",\n" -»
		rel«rel.entity.name.toFirstUpper()»«rel.name.toFirstUpper()» TEXT
		«ENDFOREACH -»
		«ENDLET -»
	)`);
«ENDDEFINE-»

