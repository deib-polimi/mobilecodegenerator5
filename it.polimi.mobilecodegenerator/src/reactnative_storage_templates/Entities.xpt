«IMPORT metamodel»

«DEFINE main FOR Application-»
«IF dataHandler.databaseHandler != null-»
«EXPAND entity FOREACH dataHandler.databaseHandler.entities-»
«ENDIF-»
«ENDDEFINE-»

«DEFINE entity FOR Entity-»
«FILE databaseHandler.dataHandler.application.name + "/storage/entities/" + name + ".js"-»
import { ContentValues, ContentValuesTypes } from "../ContentValues";
import DatabaseStore from "../DatabaseStore";
import getDB from "../DatabaseHandler";

export class «name.toFirstUpper()-» {
	static contentValues(entity) {
	    let cv = new ContentValues();
	    cv.add(ContentValuesTypes.STRING, '«primaryKey -»', entity.«primaryKey -»);
	    «FOREACH entityAttributes AS attr-»
		cv.add(ContentValuesTypes.«attr.type.toUpperCase()-», '«attr.name-»', entity.«attr.name-»);
		«ENDFOREACH-»

		«REM»
			1:1 and N:1 relations are implemented using a reference attribute on the entity that acts as source of the relation
			Hence, we must care of attributes derived from such relations
		«ENDREM»
		«FOREACH entityRelationships AS rel-»
		«IF rel.type.matches("N : 1") || rel.type.matches("1 : 1")-»
		cv.add(ContentValuesTypes.STRING, 'rel«rel.destination.toFirstUpper()»«rel.name.toFirstUpper()»', entity.rel«rel.destination.toFirstUpper()-»«rel.name.toFirstUpper()-» || '');        	
	    «ENDIF-»
		«ENDFOREACH-»
		
		«REM»
			For 1:N relations, the reference is stored in the entity ad the "N" side, i.e. the destination entity.
			Hence, we have to check if current entity is the destination of some 1:N relation.
		«ENDREM»
		«FOREACH databaseHandler.entities AS ent -»
		«FOREACH ent.entityRelationships AS rel -»
		«IF rel.type.matches("1 : N") && rel.destination == name -»
		cv.add(ContentValuesTypes.STRING, 'rel«ent.name.toFirstUpper()»«rel.name.toFirstUpper()»', entity.rel«ent.name.toFirstUpper()»«rel.name.toFirstUpper()» || '')
		«ENDIF»
		«ENDFOREACH -»
		«ENDFOREACH -»
		
		«REM»TODO N:N rels!!«ENDREM»
	}
	static craft(id) {
		return {
			«REM»Put primary key in the right place«ENDREM»
			«primaryKey»: id,
			«REM»Define attributes«ENDREM»
			«FOREACH entityAttributes AS attr-»
			«attr.name-»: undefined,
			«ENDFOREACH-»
			«REM»Create attributes for 1:1 and N:1 relations that have this entity as source«ENDREM»
			«FOREACH entityRelationships AS rel-»
			«IF rel.type.matches("N : 1") || rel.type.matches("1 : 1")-»
			rel«rel.destination.toFirstUpper()»«rel.name.toFirstUpper()»: '',
			«ENDIF-»
			«ENDFOREACH-»
			«REM»Create attributes for 1:N relations that have this entity as destination«ENDREM»
			«FOREACH databaseHandler.entities AS ent -»
			«FOREACH ent.entityRelationships AS rel -»
			«IF rel.type.matches("1 : N") && rel.destination == name -»
			rel«ent.name.toFirstUpper()»«rel.name.toFirstUpper()»: '',
			«ENDIF»
			«ENDFOREACH -»
			«ENDFOREACH -»
		}
	}
}

export class «name.toFirstUpper()»Store extends DatabaseStore {
    constructor(db) {
        super(db, 'TBL_«name.toFirstUpper()»', '«primaryKey»', «name.toFirstUpper()»);
    }
    «FOREACH databaseHandler.entities AS ent»
    «LET ent.entityRelationships.select(e|e.destination == name) AS rels »
    «FOREACH rels AS rel»
    «IF rel.type.matches("1 : N")»
    getByRel«ent.name.toFirstUpper()»«rel.name.toFirstUpper()»(entityId) {
    	return this.getEntitySet(`rel«ent.name.toFirstUpper()»«rel.name.toFirstUpper()» == '${entityId}'`);
    }
    «ENDIF»
    «ENDFOREACH»
    «ENDLET»
    «ENDFOREACH»
}
«ENDFILE-»
«ENDDEFINE-»