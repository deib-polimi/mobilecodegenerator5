«REM»
Copyright 2018 Osio Alberto
This file is part of it.polimi.mobilecodegenerator.

it.polimi.mobilecodegenerator is free software: 
you can redistribute it and/or modify it under the terms of the 
GNU General Public License as published by the Free Software Foundation, 
either version 3 of the License, or (at your option) any later version.

it.polimi.mobilecodegenerator is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
See the GNU General Public License for more details.You should have received a copy of the GNU General Public License
along with it.polimi.mobilecodegenerator. If not, see <http://www.gnu.org/licenses/>
«ENDREM»

«IMPORT metamodel»

«REM»
----------------------------------------------------------------------------------------------------------------------------------
                                                                   DISCLAIMER

PLEASE think very carefully before modifying this file

Some very important things to know
1) Each element that is direct children of a ConstraintLayout component MUST have id and style properties
	- The ID must be unique throughout the whole application
	- If you have no style to use, just pass an empty object, like style={{}}
	- If the style property of a component is not called style, just use normalizeStyleProp(Component, propertyName) to fix the issue
2) Constraints are not cyclic
3) Constraints are not overbounded
4) There is only one constraint per axis (one for the X-axis and one for the Y-axis), except for
	- constraintTop and constraintBottom can be applied at the same time
	- constraintStart and constraintEnd can be applied at the same time
5) The dimension of the ConstraintLayout component is fixed (i.e. no scrolling)
	The onLayout event must return the correct dimension
6) Do not apply margins in the style property, use properties instead (UIPhoneControl.xpt should take care of this)
7) If you need to have some components' width or height computed at runtime (for example because you need to measure some text, 
   or you need to do complex calculations basing on device's capabilities), attach to your component a property like fluidWidth
   or fluidHeight that points to a function capable of computing respectively width and height. The function is invoked with
   the element whose measures must be computed, the parent width and the parent height. Any measurement is considered in device
   independent pixel.
8) If you edit this file, please edit this disclaimer accordingly
----------------------------------------------------------------------------------------------------------------------------------
«ENDREM»

«DEFINE main FOR Application»
«FILE name + "/ConstraintLayout.js"»
import React from 'react';
import ConstraintCalculator from './ConstraintCalculator';
import { View, Keyboard } from 'react-native';


export class ConstraintLayout extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            skipDueToKeyboard: false
        }
        this.keyboardShowListener = Keyboard.addListener('keyboardDidShow', () => {
            this.setState({
                skipDueToKeyboard: true
            });
        });
        this.keyboardHideListener = Keyboard.addListener('keyboardDidHide', () => {
            this.setState({
                skipDueToKeyboard: true
            });
        });
        this.onLayout = this.onLayout.bind(this);
    }

    componentDidMount() {
        this.key = ConstraintCalculator.createGroup();
        React.Children.forEach(this.props.children, child => {
            ConstraintCalculator.register(this.key, child);
        });
        ConstraintCalculator.finalizeGroup(this.key);
    }

    componentWillUnmount() {
        ConstraintCalculator.deleteGroup(this.key);
        this.keyboardShowListener.remove();
        this.keyboardHideListener.remove();
    }

    onLayout(event) {
        const width = event.nativeEvent.layout.width;
        const height = event.nativeEvent.layout.height;
        // Not to be triggered on keyboard opening, but only on device rotation
        // This works because keyboard show | hide event is called before onLayout, 
        // and the listener is used to prevent the recomputation at next layout cycle
        if (!this.state.skipDueToKeyboard) {
            ConstraintCalculator.recomputeGroup(this.key, width, height);
        } else {
            this.setState({ skipDueToKeyboard: false });
        }
    }

    render() {
        return (
            <View style={this.props.style} onLayout={this.onLayout}>
                {this.props.children}
            </View>
        )
    }

}

export function withConstraints(WrappedComponent) {
    return class extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                style: ConstraintCalculator.computed[this.props.id] || {}
            }
        }
        componentDidMount() {
            ConstraintCalculator.addListener(this.props.id, style => {
                this.setState({
                    style
                });
            });
        }
        componentWillUnmount() {
            ConstraintCalculator.removeListener(this.props.id);
        }
        render() {
            let {style, ...others} = this.props;
            style = {
                ...style,
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                marginVertical: 0,
                marginHorizontal: 0,
                margin: 0,
                position: 'absolute',
                ...this.state.style,
            };
            others = {
                ...others,
                marginTop: 0,
                marginBottom: 0,
                marginLeft: 0,
                marginRight: 0,
                marginVertical: 0,
                marginHorizontal: 0,
                margin: 0,
            };
            return <WrappedComponent style={style} {...others} />
        }
    }
}

export function normalizeStyleProp(WrappedComponent, stylePropName) {
    return class extends React.Component {
        constructor(props) {
            super(props);
        }
        render() {
            let {style, ...others} = this.props;
            others[stylePropName] = style;
            return <WrappedComponent {...others} />
        }
    }
}

«ENDFILE»
«FILE name + "/ConstraintCalculator.js"»
import React from 'react';

function marginTop(element) {
    return element.props.marginTop || element.props.marginVertical || element.props.margin || 0;
}

function marginBottom(element) {
    return element.props.marginBottom || element.props.marginVertical || element.props.margin || 0;
}

function marginStart(element) {
    return element.props.marginStart || element.props.marginHorizontal || element.props.margin || 0;
}

function marginEnd(element) {
    return element.props.marginEnd || element.props.marginHorizontal || element.props.margin || 0;
}

function isWidthConstrained(element) {
    return element.props.constraintWidth !== undefined
        || element.props.constraintWidthPercent !== undefined
        || (element.props.constraintStart !== undefined && element.props.constraintEnd !== undefined);
}

function isHeightConstrained(element) {
    return element.props.constraintHeight !== undefined
        || element.props.constraintHeightPercent !== undefined
        || (element.props.constraintTop !== undefined && element.props.constraintBottom !== undefined);
}

function width(element, parentWidth, otherStyles) {
    if (element === null) {
        return parentWidth;
    }
    if (otherStyles[element.props.id] && otherStyles[element.props.id].width !== undefined) {
        return otherStyles[element.props.id].width;
    }
    if (element.props.constraintWidth !== undefined) {
        return element.props.constraintWidth;
    }
    else if (element.props.constraintWidthPercent !== undefined) {
        return element.props.constraintWidthPercent * parentWidth;
    }
    else if (element.props.constraintStart && element.props.constraintEnd) {
        let start = element.props.constraintStart;
        let end = element.props.constraintEnd;
        let startRef = start.ref !== null ? otherStyles[start.ref][start.side] : 0;
        let endRef = end.ref !== null ? otherStyles[end.ref][end.side] : parentWidth;
        return endRef - startRef - marginTop(element) - marginBottom(element);
    }
    else {
        return element.props.defaultWidth;
    }
}

function height(element, parentHeight, otherStyles) {
    if (element === null) {
        return parentHeight;
    }
    if (otherStyles[element.props.id] && otherStyles[element.props.id].height !== undefined) {
        return otherStyles[element.props.id].height;
    }
    if (element.props.constraintHeight !== undefined) {
        return element.props.constraintHeight;
    }
    else if (element.props.constraintHeightPercent !== undefined) {
        return element.props.constraintHeightPercent * parentHeight;
    }
    else if (element.props.constraintTop && element.props.constraintBottom) {
        let top = element.props.constraintTop;
        let bottom = element.props.constraintBottom;
        let topRef = top.ref !== null ? otherStyles[top.ref][top.side] : 0;
        let bottomRef = bottom.ref !== null ? otherStyles[bottom.ref][bottom.side] : parentHeight;
        return bottomRef - topRef - marginTop(element) - marginBottom(element);
    }
    else {
        return element.props.defaultHeight;
    }
}

function top(element, height, parentHeight, otherStyles) {
    if (element === null) {
        return 0;
    }
    if (element.props.constraintTop) {
        let top = element.props.constraintTop;
        let ref = top.ref !== null ? otherStyles[top.ref][top.side] : 0;
        return ref + marginTop(element);
    }
    else if (element.props.constraintBottom) {
        let bottom = element.props.constraintBottom;
        let ref = bottom.ref !== null ? otherStyles[bottom.ref][bottom.side] : parentHeight;
        return ref - height - marginBottom(element);
    }
    else if (element.props.constraintCenterY) {
        let c = element.props.constraintCenterY;
        let heightRef = c.ref !== null ? otherStyles[c.ref].height : parentHeight;
        let heightMe = height;
        let _marginTop = marginTop(element);
        let _marginBottom = marginBottom(element);
        let skew = (heightRef - heightMe - _marginTop - _marginBottom) / 2;
        return (c.ref !== null ? otherStyles[c.ref].top : 0) + skew + _marginTop;
    }
    else {
        return element.props.posY + marginTop(element);
    }
}

function left(element, width, parentWidth, otherStyles) {
    if (element === null) {
        return 0;
    }
    if (element.props.constraintStart) {
        let c = element.props.constraintStart;
        let ref = c.ref !== null ? otherStyles[c.ref][c.side] : 0;
        return ref + marginStart(element);
    }
    else if (element.props.constraintEnd) {
        let c = element.props.constraintEnd;
        let ref = c.ref !== null ? otherStyles[c.ref][c.side] : parentWidth;
        return ref - marginEnd(element) - width;
    }
    else if (element.props.constraintCenterX) {
        let c = element.props.constraintCenterX;
        let widthRef = c.ref !== null ? otherStyles[c.ref].width : parentWidth;
        let widthMe = width;
        let _marginStart = marginStart(element);
        let _marginEnd = marginEnd(element);
        let skew = (widthRef - widthMe - _marginStart - _marginEnd) / 2;
        return (c.ref !== null ? otherStyles[c.ref].left : 0) + skew + _marginStart;
    }
    else {
        return element.props.posX + marginStart(element);
    }
}

function solveSpreadChain(componentsMeasures, overallSpace, insideChain) {
    const consumed = componentsMeasures.reduce((a, b) => a + b, 0);
    const spaceCount = insideChain ? componentsMeasures.length - 1 : componentsMeasures.length + 1;
    const leftover = overallSpace - consumed;
    const spacing = leftover / spaceCount;
    let curr = insideChain ? 0 : spacing;
    let out = [];
    componentsMeasures.forEach(measure => {
        out.push(curr);
        curr += measure;
        curr += spacing;
    });
    return out;
}

function solvePackedChain(componentsMeasures, overallSpace, bias) {
    const consumed = componentsMeasures.reduce((a, b) => a + b, 0);
    const leftover = overallSpace - consumed;
    const spacing = leftover * bias;
    let curr = spacing;
    let out = [];
    componentsMeasures.forEach(measure => {
        out.push(curr);
        curr += measure;
    });
    return out;
}

function solveWeightedChain(componentWeights, overallSpace) {
    const totalWeight = componentWeights.reduce((a, b) => a + b, 0);
    const spaceUnit = overallSpace / totalWeight;
    return componentWeights.map(w => w * spaceUnit);
}

function solveHorizontalChain(reactChildren, parentWidth, parentHeight, otherStyles) {
    const head = reactChildren[0];
    const chainType = head.props.constraintChain;
    if (chainType === 'spread' || chainType === 'spread_inside') {
        const widths = reactChildren.map(child => {
            return width(child, parentWidth, parentHeight, otherStyles) + marginStart(child) + marginEnd(child);
        });
        const lefts = solveSpreadChain(widths, parentWidth, chainType === 'spread_inside');
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                width: widths[i],
                left: lefts[i] + marginStart(child)
            };
        });
        return out;
    }
    else if (chainType === 'packed') {
        const widths = reactChildren.map(child => {
            return width(child, parentWidth, parentHeight, otherStyles) + marginStart(child) + marginEnd(child);
        });
        let bias = head.props.constraintChainBias;
        if (bias === undefined || bias < 0.0 || bias > 1.0) bias = 0.5;
        const lefts = solvePackedChain(widths, parentWidth, bias);
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                width: widths[i],
                left: lefts[i] + marginStart(child)
            };
        });
        return out;
    }
    else if (chainType === 'weighted') {
        const weights = reactChildren.map(child => {
            let w = child.props.constraintWeight;
            if (w === undefined || w < 1)
                w = 1;
            return w;
        });
        const widths = solveWeightedChain(weights, parentWidth);
        let acc = 0;
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                width: widths[i] - marginStart(child) - marginEnd(width),
                left: acc + marginStart(child)
            };
            acc += widths[i];
        });
        return out;
    }
}

function solveVerticalChain(reactChildren, parentWidth, parentHeight, otherStyles) {
    const head = reactChildren[0];
    const chainType = head.props.constraintChain;
    if (chainType === 'spread' || chainType === 'spread_inside') {
        const heights = reactChildren.map(child => {
            return height(child, parentWidth, parentHeight, otherStyles) + marginTop(child) + marginBottom(child);
        });
        const tops = solveSpreadChain(heights, parentHeight, chainType === 'spread_inside');
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                height: heights[i],
                top: tops[i] + marginTop(child)
            };
        });
        return out;
    }
    else if (chainType === 'packed') {
        const heights = reactChildren.map(child => {
            return height(child, parentWidth, parentHeight, otherStyles) + marginTop(child) + marginBottom(child);
        });
        let bias = head.props.constraintChainBias;
        if (bias === undefined || bias < 0.0 || bias > 1.0) bias = 0.5;
        const tops = solvePackedChain(heights, parentHeight, bias);
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                height: heights[i],
                top: tops[i] + marginTop(child)
            };
        });
        return out;
    }
    else if (chainType === 'weighted') {
        const weights = reactChildren.map(child => {
            let w = child.props.constraintWeight;
            if (w === undefined || w < 1)
                w = 1;
            return w;
        });
        const heights = solveWeightedChain(weights, parentHeight);
        let acc = 0;
        const out = {};
        reactChildren.forEach((child, i) => {
            out[child.props.id] = {
                height: heights[i] - marginTop(child) - marginBottom(width),
                top: acc + marginTop(child)
            };
            acc += heights[i];
        });
        return out;
    }
}

function solveChain(reactChildren, parentWidth, parentHeight, otherStyles) {
    const head = reactChildren[0];
    if (head.constraintChainAxis === 'vertical') {
        return solveVerticalChain(reactChildren, parentWidth, parentHeight, otherStyles);
    } else {
        return solveHorizontalChain(reactChildren, parentWidth, parentHeight, otherStyles);
    }
}

function computeStyle(reactChild, parentWidth, parentHeight, otherStyles) {
    let _width, _height;
    if (reactChild.props.constraintRatio !== undefined) {
        if (isWidthConstrained(reactChild)) {
            _width = width(reactChild, parentWidth, otherStyles);
            _height = _width / reactChild.props.constraintRatio;
        } else {
            _height = height(reactChild, parentHeight, otherStyles);
            _width = _height * reactChild.props.constraintRatio;
        }
    } else {
        _width = width(reactChild, parentWidth, otherStyles);
        _height = height(reactChild, parentHeight, otherStyles);
    }
    let _top = top(reactChild, _height, parentHeight, otherStyles);
    let _left = left(reactChild, _width, parentWidth, otherStyles);
    return {
        width: _width,
        height: _height,
        top: _top,
        left: _left,
        start: _left,
        bottom: _height + _top,
        right: _width + _left,
        end: _width + _left
    };
}

function sortBasingOnDependencies(reactChildrenArray) {
    let deps = {};
    let map = {};
    reactChildrenArray.forEach(reactChild => {
        const myDeps = {};
        let count = 0;
        map[reactChild.props.id] = reactChild;
        if (reactChild.props.constraintTop && reactChild.props.constraintTop.ref != null && !myDeps[reactChild.props.constraintTop.ref]) {
            count++;
            myDeps[reactChild.props.constraintTop.ref] = true;
        }
        if (reactChild.props.constraintBottom && reactChild.props.constraintBottom.ref != null && !myDeps[reactChild.props.constraintBottom.ref]) {
            count++;
            myDeps[reactChild.props.constraintBottom.ref] = true;
        }
        if (reactChild.props.constraintStart && reactChild.props.constraintStart.ref != null && !myDeps[reactChild.props.constraintStart.ref]) {
            count++;
            myDeps[reactChild.props.constraintStart.ref] = true;
        }
        if (reactChild.props.constraintEnd && reactChild.props.constraintEnd.ref != null && !myDeps[reactChild.props.constraintEnd.ref]) {
            count++;
            myDeps[reactChild.props.constraintEnd.ref] = true;
        }
        if (reactChild.props.constraintCenterX && reactChild.props.constraintCenterX.ref != null && !myDeps[reactChild.props.constraintCenterX.ref]) {
            count++;
            myDeps[reactChild.props.constraintCenterX.ref] = true;
        }
        if (reactChild.props.constraintCenterY && reactChild.props.constraintCenterY.ref != null && !myDeps[reactChild.props.constraintCenterY.ref]) {
            count++;
            myDeps[reactChild.props.constraintCenterY.ref] = true;
        }
        myDeps.count = count;
        deps[reactChild.props.id] = myDeps;
    });
    const ready = {};
    const sorted = [];
    let left = reactChildrenArray.length;
    while (left > 0) {
        for (let id in deps) {
            for (let ref in deps[id]) {
                if (ready[ref]) {
                    delete deps[id][ref];
                    deps[id].count--;
                }
            }
            if (deps[id].count === 0 && !ready[id]) {
                ready[id] = true;
                left--;
                sorted.push(map[id]);
            }
        }
    }
    return sorted;
}

function findChains(reactChild) {
    const heads = [];
    const next = {};
    const mapper = {};
    reactChildren.forEach(child => {
        mapper[child.props.id] = child;
        if (child.props.constraintChain !== undefined) {
            heads.push(child.props.id);
        }
        else if (child.props.constraintChainPrev !== undefined) {
            next[child.props.constraintChainPrev] = child.props.id;
        }
    });
    const chains = heads.map(head => {
        let chain = [mapper[head]];
        let curr = head;
        while(next[curr]) {
            chain.push(mapper[next[curr]]);
            curr = next[curr];
        }
        return chain;
    });
    return chains.filter(chain => chain.length > 1);
}

function computeStyles(reactChildren, parentWidth, parentHeight) {
    let styles = {};
    let async = [];
    reactChildren.forEach(child => {
        styles[child.props.id] = {};
        if (child.props.fluidHeight) {
            async.push(child.props.fluidHeight(child, parentWidth, parentHeight).then(m => {
                styles[child.props.id].height = m;
            }));
        }
        if (child.props.fluidWidth) {
            async.push(child.props.fluidWidth(child, parentWidth, parentHeight).then(m => {
                styles[child.props.id].width = m;
            }));
        }
    });
    return Promise.all(async).then(() => {
        let chains = findChains(reactChildren);
        chains.forEach(chain => {
            let solved = solveChain(chain, parentWidth, parentHeight, styles);
            styles = {
                ...styles,
                ...solved
            };
        });
        reactChildren.forEach(child => {
            styles[child.props.id] = computeStyle(child, parentWidth, parentHeight, styles);
        });
        return styles;
    });

}
class ConstraintCalculatorImpl {

    constructor() {
        this.pending = {};
        this.computed = {};
        this.events = {};
        this.size = 0;
    }

    createGroup() {
        const key = 'Group' + (++this.size);
        this.pending[key] = [];
        return key;
    }

    register(groupKey, element) {
        this.pending[groupKey].push(element);
    }

    finalizeGroup(groupKey) {
        this.pending[groupKey] = sortBasingOnDependencies(this.pending[groupKey]);
    }

    recomputeGroup(groupKey, width, height) {
        computeStyles(this.pending[groupKey], width, height).then(styles => {
            this.computed = {
                ...this.computed,
                ...styles
            };
            for (let id in styles) {
                if (this.events[id]) this.events[id](styles[id]);
            }
        });
    }

    deleteGroup(groupKey) {
        this.pending[groupKey].forEach(child => {
            delete this.computed[child.props.id];
            delete this.events[child.props.id];
        });
        delete this.pending[groupKey];
    }

    addListener(elementId, fn) {
        this.events[elementId] = style => fn(style);
    }

    removeListener(elementId) {
        delete this.events[elementId];
    }

}

const ConstraintCalculator = new ConstraintCalculatorImpl();
export default ConstraintCalculator;
«ENDFILE»
«FILE name + "/ConstrainableControls.js"»
import {
	Text,
	TextInput,
	Button,
	TouchableHighlight,
	Image,
	View,
	Slider,
	Switch,
	WebView,
	FlatList
} from 'react-native';

«IF viewControllers.videoViews.size > 0»
import VideoPlayer from './VideoPlayer';
«ENDIF»
«IF viewControllers.spinners.size > 0»
import { Dropdown } from 'react-native-material-dropdown';
«ENDIF»
«IF viewControllers.audioPlayers.size > 0 || viewControllers.audioRecorder.size > 0 »
import {
«IF viewControllers.audioPlayers.size > 0»
	AudioPlayer,
«ENDIF»
«IF viewControllers.audioRecorder.size > 0»
	AudioRecorder,
«ENDIF»
} from './Audio';
«ENDIF»
«IF viewControllers.gridViews.size > 0»
import GridView from 'react-native-super-grid';
«ENDIF»
«IF viewControllers.cards.size > 0»
import Card from './Card';
«ENDIF»
«IF viewControllers.map.size > 0»
import MapView from 'react-native-maps';
«ENDIF»
«IF viewControllers.datepickers.size > 0 || viewControllers.timepickers.size > 0»
import DatePicker from 'react-native-datepicker';
«ENDIF»
import { withConstraints, normalizeStyleProp } from './ConstraintLayout';


export const CText = withConstraints(Text);
export const CTextInput = withConstraints(TextInput);
export const CButton = withConstraints(Button);
export const CTouchableHighlight = withConstraints(TouchableHighlight);
export const CImage = withConstraints(Image);
export const CView = withConstraints(View);
export const CSlider = withConstraints(Slider);
export const CSwitch = withConstraints(Switch);
export const CWebView = withConstraints(WebView);
export const CFlatList = withConstraints(FlatList);

«IF viewControllers.videoViews.size > 0»
export const CVideoPlayer = withConstraints(VideoPlayer);
«ENDIF»
«IF viewControllers.spinners.size > 0»
export const CDropdown = withConstraints(normalizeStyleProp(Dropdown, 'containerStyle'));
«ENDIF»
«IF viewControllers.audioPlayers.size > 0»
export const CAudioPlayer = withConstraints(AudioPlayer);
«ENDIF»
«IF viewControllers.audioRecorder.size > 0»
export const CAudioRecorder = withConstraints(AudioRecorder);
«ENDIF»
«IF viewControllers.gridViews.size > 0»
export const CGridView = withConstraints(GridView);
«ENDIF»
«IF viewControllers.cards.size > 0»
export const CCard = withConstraints(Card);
«ENDIF»
«IF viewControllers.map.size > 0»
export const CMapView = withConstraints(MapView);
«ENDIF»
«IF viewControllers.datepickers.size > 0 || viewControllers.timepickers.size > 0»
export const CDatePicker = withConstraints(DatePicker);
«ENDIF»
«ENDFILE»
«ENDDEFINE»