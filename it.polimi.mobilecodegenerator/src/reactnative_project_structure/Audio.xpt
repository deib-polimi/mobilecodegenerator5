«IMPORT metamodel»

«DEFINE main FOR Application-»
«IF viewControllers.audioPlayers.size > 0 || viewControllers.audioRecorder.size > 0-»
«FILE name + "/Audio.js"-»
import React from 'react';
import { View, TouchableHighlight, StyleSheet, Text, Platform, PermissionsAndroid } from 'react-native';
import { Player, Recorder } from 'react-native-audio-toolkit';
import Icon from 'react-native-vector-icons/FontAwesome';

let styles = StyleSheet.create({
    container: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center'
    },
    buttonView: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%',
        height: '100%'
    },
    controls: {
        width: 60,
        height: 60,
        borderRadius: 30,
        marginVertical: 5,
        marginHorizontal: 2,
        backgroundColor: '#cccccc'
    },
    recButtonView: {
        padding: 5,
        borderRadius: 3
    }
})

class AudioManagerImpl {

    constructor() {
        this.players = {};
        this.playing = undefined;
        this.recording = undefined;
        this.lastRecord = undefined;
        this.permissionChecked = false;
        this.permission = false;

        this.prepare = this.prepare.bind(this);
        this.play = this.play.bind(this);
        this.stop = this.stop.bind(this);
        this.pause = this.pause.bind(this);
        this.startRecording = this.startRecording.bind(this);
        this.stopRecording = this.stopRecording.bind(this);
        this.playLastRecord = this.playLastRecord.bind(this);
        this.stopLastRecord = this.startRecording.bind(this);
        this.pauseLastRecord = this.pauseLastRecord.bind(this);
    }

    checkPermission() {
        if (Platform.OS !== 'android') {
            return Promise.resolve(true);
        }

        return PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.RECORD_AUDIO, {
            title: 'Microphone Permission',
            message: 'This app needs access to your microphone in order to record audio.'
        }).then(result1 => {
            return Promise.all([
                result1,
                PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE, {
                    title: 'Storage Permission',
                    message: 'This app needs access to your storage space in order to record audio.'
                })
            ])
        }).then(([result1, result2]) => {
            console.log('permission result:', result1, ' ', result2);
            return (result1 === true || result1 === PermissionsAndroid.RESULTS.GRANTED)
                && (result2 === true || result2 === PermissionsAndroid.RESULTS.GRANTED);

        });

    }

    prepare(file) {
        this.players[file] = new Player(file, {
            autoDestroy: false
        });
    }

    play(file) {
        let async = Promise.resolve();
        if (this.recording === undefined) {
            if (this.playing !== undefined && this.playing !== this.players[file]) {
                async = new Promise((resolve, reject) => {
                    this.playing.stop(resolve);
                });
            }
            async.then(() => {
                if (this.players[file] === undefined) {
                    this.prepare(file);
                }
                this.playing = this.players[file];
                return new Promise((resolve, reject) => {
                    this.playing.play(resolve);
                });
            });
        }
        return async;
    }

    pause(file) {
        let async = Promise.resolve();
        if (this.playing !== undefined && this.playing === this.players[file]) {
            async = new Promise((resolve, reject) => {
                this.playing.pause(resolve);
                this.playing = undefined;
            });
        }
        return async;
    }

    stop(file) {
        let async = Promise.resolve();
        if (this.playing !== undefined && this.playing === this.players[file]) {
            async = new Promise((resolve, reject) => {
                this.playing.stop(resolve);
                this.playing = undefined;
            });
        }
        return async;
    }

    startRecording() {
        let authCheck = Promise.resolve(this.permission);
        if (!this.permissionChecked) {
            authCheck = this.checkPermission().then(outcome => {
                this.permissionChecked = true;
                this.permission = outcome;
                return outcome;
            })
        }
        return authCheck.then(outcome => {
            if (outcome) {
                let file = 'record_' + (new Date()).getTime() + '.mp4';
                let async = Promise.resolve();
                this.lastRecord = file;
                if (this.playing) {
                    async = new Promise((resolve, reject) => {
                        this.playing.stop(resolve);
                        this.playing = undefined;
                    });
                }
                async.then(() => {
                    return new Promise((resolve, reject) => {
                        this.recording = new Recorder(file, {
                            autoDestroy: false
                        });
                        this.recording.record(resolve);
                    });
                });
                return async.then(path => {
                    console.log(path);
                    return file;
                });
            } else {
                return Promise.reject();
            }
        })
    }

    stopRecording() {
        let async = Promise.resolve();
        if (this.recording) {
            async = new Promise((resolve, reject) => {
                this.recording.stop(resolve);
            }).then(() => {
                return new Promise((resolve, reject) => {
                    this.recording.destroy(resolve);
                    this.recording = undefined;
                });
            });
        }
        return async;
    }

    playLastRecord() {
        if (this.lastRecord) {
            return this.play(this.lastRecord);
        }
        return Promise.resolve();
    }

    pauseLastRecord() {
        if (this.lastRecord) {
            return this.pause(this.lastRecord);
        }
        return Promise.resolve();
    }

    stopLastRecord() {
        if (this.lastRecord) {
            return this.stop(this.lastRecord);
        }
        return Promise.resolve();
    }

    flush(file) {
        let async = Promise.resolve();
        if (playing && playing === this.players[file]) {
            async = this.stop(file)
        }
        return async.then(() => {
            delete this.players[file];
        });
    }
}

const AudioManager = new AudioManagerImpl();

export class AudioPlayer extends React.Component {

    constructor(props) {
        super(props);
        if (!props.playRecord) {
            AudioManager.prepare(props.resource);
        }
        this.play = this.play.bind(this);
        this.pause = this.pause.bind(this);
        this.stop = this.stop.bind(this);
    }

    play() {
        if (this.props.playRecord) {
            AudioManager.playLastRecord();
        } else {
            AudioManager.play(this.props.resource);
        }
        if (this.props.onPlay) this.props.onPlay();
    }

    pause() {
        if (this.props.playRecord) {
            AudioManager.pauseLastRecord();
        } else {
            AudioManager.pause(this.props.resource);
        }
        if (this.props.onPause) this.props.onPause();
    }

    stop() {
        if (this.props.playRecord) {
            AudioManager.stopLastRecord();
        } else {
            AudioManager.stop(this.props.resource);
        }
        if (this.props.onStop) this.props.onStop();
    }

    componentWillUnmount() {
        if (!this.props.playRecord) {
            AudioManager.flush(this.props.resource);
        }
    }

    render() {
        return (
            <View style={this.props.style}>
                <View style={styles.container}>
                    <TouchableHighlight
                        style={styles.controls}
                        onPress={this.play}
                    >
                        <View style={styles.buttonView}>
                            <Icon name="play" size={20} color="#000" />
                        </View>
                    </TouchableHighlight>
                    <TouchableHighlight
                        style={styles.controls}
                        onPress={this.pause}
                    >
                        <View style={styles.buttonView}>
                            <Icon name="pause" size={20} color="#000" />
                        </View>
                    </TouchableHighlight>
                    <TouchableHighlight
                        style={styles.controls}
                        onPress={this.stop}
                    >
                        <View style={styles.buttonView}>
                            <Icon name="stop" size={20} color="#000" />
                        </View>
                    </TouchableHighlight>
                </View>
            </View>
        )
    }
}

export class AudioRecorder extends React.Component {

    constructor(props) {
        super(props);
        this.start = this.start.bind(this);
        this.stop = this.stop.bind(this);
        this.state = {
            recording: false
        };

        this.start = this.start.bind(this);
        this.stop = this.stop.bind(this);
        this.toggle = this.toggle.bind(this);
    }

    start() {
        if (this.state.recording === false) {
            this.setState({ recording: true });
            AudioManager
                .startRecording()
                .then(file => {
                    console.log(file);
                    if (this.props.onRecordStart) this.props.onStartRecording(file);
                }, () => {
                    // Promise was rejected, nothing to do about it
                });
        }
    }

    stop() {
        if (this.state.recording === true) {
            AudioManager
                .stopRecording()
                .then(() => {
                    this.setState({ recording: false });
                    if (this.props.onRecordStop) this.props.onStopRecording();
                })
        }
    }

    toggle() {
        if (this.state.recording) {
            this.stop();
        } else {
            this.start();
        }
    }

    componentWillUnmount() {
        if (this.state.recording) {
            this.stop();
        }
    }

    render() {
        let text;
        if (this.state.recording) {
            text = <Text style={styles.buttonText}>Stop</Text>;
        } else {
            text = <Text style={styles.buttonText}>Rec</Text>;
        }
        return (
            <View style={this.props.style}>
                <View style={styles.container}>
                    <TouchableHighlight
                        style={{
                            borderRadius: 2,
                            backgroundColor: '#cccccc'
                        }}
                        onPress={this.toggle}
                    >
                        <View style={styles.recButtonView}>
                            {text}
                        </View>
                    </TouchableHighlight>
                </View>
            </View>
        )
    }
}
«ENDFILE-»
«ENDIF-»
«ENDDEFINE-»