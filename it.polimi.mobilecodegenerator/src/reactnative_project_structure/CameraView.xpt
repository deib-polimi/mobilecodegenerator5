«IMPORT metamodel»

«DEFINE main FOR Application»
«IF viewControllers.photocameraController.size > 0 || viewControllers.videocameraController.size > 0»
«FILE name + "/CameraView.js"»
import React from 'react';
import { View, TouchableOpacity, PermissionsAndroid, Platform } from 'react-native';
import { RNCamera } from 'react-native-camera';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

const styles = {
    container: {
        flex: 1,
        flexDirection: 'column',
        backgroundColor: 'black'
    },
    preview: {
        flex: 1,
        justifyContent: 'flex-end',
        alignItems: 'center'
    },
    capture: {
        flex: 0,
        backgroundColor: '#000',
        borderRadius: 30,
        borderWidth: 4,
        borderColor: '#FFF',
        padding: 10,
        alignSelf: 'center',
        margin: 20
    },
    flash: {
        flex: 0,
        backgroundColor: '#000',
        padding: 10,
        alignSelf: 'flex-start',
        margin: 20
    }
}

export default class CameraView extends React.Component {

    constructor(props) {
        super(props);
        this.camera = undefined;
        this.permissionAsked = false;
        this.permissionOutcome = false;
        this.state = {
            type: RNCamera.Constants.Type.back,
            flash: RNCamera.Constants.FlashMode.auto,
            recording: false
        };
        this.takePicture = this.takePicture.bind(this);
        this.flashAuto = this.flashAuto.bind(this);
        this.flashOn = this.flashOn.bind(this);
        this.flashOff = this.flashOff.bind(this);
        this.rotateCamera = this.rotateCamera.bind(this);
        this.startRecord = this.startRecord.bind(this);
        this.stopRecord = this.stopRecord.bind(this);
    }

    ensurePermission() {
        if (Platform.OS !== 'android') {
            return Promise.resolve(true);
        }
        if (this.permissionAsked) {
            return Promise.resolve(this.permissionOutcome);
        }

        return PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.RECORD_AUDIO, {
            title: 'Microphone Permission',
            message: 'This app needs access to your microphone in order to record audio.'
        }).then(result1 => {
            return Promise.all([
                result1,
                PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE, {
                    title: 'Storage Permission',
                    message: 'This app needs write access to your storage space in order to record audio.'
                })
            ])
        }).then(([result1, result2]) => {
            return Promise.all([
                result1,
                result2,
                PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE, {
                    title: 'Storage Permission',
                    message: 'This app needs read access to your storage space in order to record audio.'
                })
            ])
        }).then(([result1, result2, result3]) => {
            console.log('permission result:', result1, result2, result3);
            this.permissionAsked = true;
            this.permissionOutcome =  (result1 === true || result1 === PermissionsAndroid.RESULTS.GRANTED)
                && (result2 === true || result2 === PermissionsAndroid.RESULTS.GRANTED)
                && (result3 === true || result3 === PermissionsAndroid.RESULTS.GRANTED);
            return this.permissionOutcome;
        });
    }

    takePicture() {
        const options = { quality: 0.8 };
        this.camera.takePictureAsync(options).then(data => {
            console.log(data.uri);
			this.props.navigation.goBack();
			this.props.navigation.getParam('onPictureTaken', () => {})(data.uri);
        });
    }

    startRecord() {
        const options = {
        }
        this.ensurePermission().then(() => {
            this.camera.recordAsync(options).then(data => {
                console.log(data.uri);
				this.props.navigation.goBack();
				this.props.navigation.getParam('onRecordEnd', () => {})(data.uri);
            });
            this.setState({
                recording: true
            });
			this.props.navigation.getParam('onRecordStart', () => {})(data.uri);
        }, () => {
			this.props.navigation.goBack();
            this.props.navigation.getParam('onPermissionFailure', () => {})(data.uri);
        })

    }

    stopRecord() {
        this.camera.stopRecording();
        this.setState({
            recording: false
        });
    }

    rotateCamera() {
        if (this.state.type === RNCamera.Constants.Type.back)
            this.setState({
                type: RNCamera.Constants.Type.front
            });
        else
            this.setState({
                type: RNCamera.Constants.Type.back
            });
    }

    flashOn() {
        this.setState({
            flash: RNCamera.Constants.FlashMode.on
        });
    }

    flashAuto() {
        this.setState({
            flash: RNCamera.Constants.FlashMode.auto
        });
    }

    flashOff() {
        this.setState({
            flash: RNCamera.Constants.FlashMode.off
        });
    }

    render() {
        return (
            <View style={styles.container}>
                <RNCamera
                    ref={ref => {
                        this.camera = ref;
                    }}
                    style={styles.preview}
                    type={this.state.type}
                    flashMode={this.state.flash}
                    permissionDialogTitle={'Permission to use camera'}
                    permissionDialogMessage={'We need your permission to use your camera phone'}
                    onBarCodeRead={({ data, type }) => {
                        console.log(data, type)
                    }}
                />
                <View style={{ flex: 0, flexDirection: 'row', justifyContent: 'space-between' }}>
                    {this.state.flash === RNCamera.Constants.FlashMode.on &&
                        <TouchableOpacity
                            onPress={this.flashAuto}
                            style={styles.flash}
                        >
                            <Icon name="flash" size={20} color="#FFF" />
                        </TouchableOpacity>
                    }
                    {this.state.flash === RNCamera.Constants.FlashMode.off &&
                        <TouchableOpacity
                            onPress={this.flashOn}
                            style={styles.flash}
                        >
                            <Icon name="flash-off" size={20} color="#FFF" />
                        </TouchableOpacity>
                    }
                    {this.state.flash === RNCamera.Constants.FlashMode.auto &&
                        <TouchableOpacity
                            onPress={this.flashOff}
                            style={styles.flash}
                        >
                            <Icon name="flash-auto" size={20} color="#FFF" />
                        </TouchableOpacity>
                    }
                    {(this.props.navigation.getParam('mode', 'camera') !== 'video') &&
                        <TouchableOpacity
                            onPress={this.takePicture}
                            style={styles.capture}
                        >
                            <Icon name="camera" size={20} color="#F00" />
                        </TouchableOpacity>
                    }
                    {(this.props.navigation.getParam('mode', 'camera') === 'video' && !this.state.recording) &&
                        <TouchableOpacity
                            onPress={this.startRecord}
                            style={styles.capture}
                        >
                            <Icon name="video" size={20} color="#F00" />
                        </TouchableOpacity>
                    }
                    {(this.props.navigation.getParam('mode', 'camera') === 'video' && this.state.recording) &&
                        <TouchableOpacity
                            onPress={this.stopRecord}
                            style={styles.capture}
                        >
                            <Icon name="stop" size={20} color="#F00" />
                        </TouchableOpacity>
                    }
                    <TouchableOpacity
                        onPress={this.rotateCamera}
                        style={styles.flash}
                    >
                        <Icon name="camera-switch" size={20} color="#FFF" />
                    </TouchableOpacity>
                </View>
            </View>
        );
    }

}
«ENDFILE»
«ENDIF»
«ENDDEFINE»