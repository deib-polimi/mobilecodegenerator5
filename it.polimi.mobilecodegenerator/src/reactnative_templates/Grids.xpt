«IMPORT metamodel»

«DEFINE styleVars FOR ViewController»
	«FOREACH gridViews AS gv»
		«EXPAND reactnative_templates::UIPhoneControl::styleVars FOR gv»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE style FOR ViewController»
	«FOREACH gridViews AS gv»
		e«gv.id»: {
			«EXPAND reactnative_templates::UIPhoneControl::style FOR gv»
		},
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE eventBinding FOR ViewController»
«FOREACH gridViews AS gv»
	this.on«gv.id»ItemSelect = this.on«gv.id»ItemSelect.bind(this);
«ENDFOREACH»
«ENDDEFINE»

«DEFINE events FOR ViewController»
«FOREACH gridViews AS gv»
	on«gv.id»ItemSelect(item) {
		console.log('Selected', JSON.stringify(item));
		if (this.props.onGridItemSelect) this.props.onGridItemSelect('«gv.id»', item);
	}
«ENDFOREACH»
«ENDDEFINE»

«DEFINE props FOR GridView»
	id="e«id»"
	«IF marginTop != null && marginTop != 0»
	marginTop={«marginTop»}
	«ENDIF»
	«IF marginBottom != null && marginBottom != 0»
	marginBottom={«marginBottom»}
	«ENDIF»
	«IF marginStart != null && marginStart != 0»
	marginStart={«marginStart»}
	«ENDIF»
	«IF marginEnd != null && marginEnd != 0»
	marginEnd={«marginEnd»}
	«ENDIF»
	defaultHeight={«defaultHeight»}
	defaultWidth={«defaultWidth»}
	posX={«posX»}
	posY={«posY»}
	«IF dimensionConstraint != null»
		«IF dimensionConstraint.fixedWidth != null»
			constraintWidth={«dimensionConstraint.fixedWidth»}
		«ELSEIF dimensionConstraint.widthPercent != null»
			constraintWidthPercent={«dimensionConstraint.widthPercent»}
		«ELSE»
			constraintWidthPercent={1.0}
		«ENDIF»
		«IF dimensionConstraint.fixedHeight != null»
			constraintHeight={«dimensionConstraint.fixedHeight»}
		«ELSEIF dimensionConstraint.heightPercent != null»
			constraintHeightPercent={«dimensionConstraint.heightPercent»}
		«ELSE»
		«ENDIF»
		«IF dimensionConstraint.fixedRatio != null»
			constraintRatio={«dimensionConstraint.fixedRatio»}
		«ENDIF»
	«ELSE»
		constraintWidthPercent={1.0}
	«ENDIF»
	«FOREACH positionConstraints AS pc»
		«IF pc.withParent == true»
			constraint«pc.layoutEdge.toString().toFirstUpper()»={{ref: null, side: '«pc.referenceLayoutEdge»'}}
		«ELSE»
			constraint«pc.layoutEdge.toString().toFirstUpper()»={{ref: 'e«pc.referenceElement.id»', side: '«pc.referenceLayoutEdge»'}}
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE render FOR ViewController»
	«FOREACH gridViews AS gv»
		<CGridView
			«EXPAND reactnative_templates::UIPhoneControl::props FOR gv»
			style={[styles.e«gv.id», { width: '100%' }]}
			itemDimension={190}
			items={[
				«FOREACH gv.gridViewCells AS cell ITERATOR iter»
					{ key: '«iter.counter1»', title: '«cell.title»', image: 'grid_image' },
				«ENDFOREACH»
				]}
			renderItem={(item) => <GridElement«gv.id.toFirstUpper()» title={item.title} image={item.image} onPress={() => this.on«gv.id»ItemSelect(item)} /> }
		></CGridView>
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE simpleLayout FOR GridView»
import React from 'react';
import { View, Text, StyleSheet, TouchableHighlight } from 'react-native';

const styles = StyleSheet.create({
	touch: {
		width: 190,
		height: 190
	},
	container: {
		width: 190,
		height: 190
	},
	title: {
		position: 'absolute',
		bottom: 0,
		left: 0,
		right: 0,
		backgroundColor: '#99999933',
		color: '#FFFFFF',
		paddingHorizontal: 10,
		paddingVertical: 14,
		fontWeight: 'bold'
	},
});

export default class GridElement«id.toFirstUpper()» extends React.Component {

	constructor(props) {
		super(props);
		this.onPress = this.onPress.bind(this);
	}
	
	onPress() {
		if (this.props.onPress) {
			this.props.onPress();
		}
	}
	
	render() {
		return (
			<TouchableHighlight onPress={this.onPress}>
				<View style={styles.container}>
					<Text style={styles.title}>{this.props.title}</Text>
				</View>
			</TouchableHighlight>
		);
	}
}
«ENDDEFINE»

«DEFINE imageLayout FOR GridView»
import React from 'react';
import { View, StyleSheet, TouchableHighlight, Image } from 'react-native';

const styles = StyleSheet.create({
	touch: {
		width: 190,
		height: 190
	},
	container: {
		width: 190,
		height: 190
	},
	image: {
		width: 190,
		height: 190,
		position: 'absolute',
		top: 0,
		left: 0
	}
});

export default class GridElement«id.toFirstUpper()» extends React.Component {

	constructor(props) {
		super(props);
		this.onPress = this.onPress.bind(this);
	}
	
	onPress() {
		if (this.props.onPress) {
			this.props.onPress();
		}
	}
	
	render() {
		return (
			<TouchableHighlight onPress={this.onPress}>
				<View style={styles.container}>
					<Image style={styles.image} source={{uri: this.props.image}} />
				</View>
			</TouchableHighlight>
		);
	}
}
«ENDDEFINE»

«DEFINE detailedLayout FOR GridView»
import React from 'react';
import { View, Text, StyleSheet, TouchableHighlight, Image } from 'react-native';

const styles = StyleSheet.create({
	touch: {
		width: 190,
		height: 190
	},
	container: {
		width: 190,
		height: 190
	},
	title: {
		position: 'absolute',
		bottom: 0,
		left: 0,
		right: 0,
		backgroundColor: '#99999933',
		color: '#FFFFFF',
		paddingHorizontal: 10,
		paddingVertical: 14,
		fontWeight: 'bold'
	},
	image: {
		width: 190,
		height: 190,
		position: 'absolute',
		top: 0,
		left: 0
	}
});

export default class GridElement«id.toFirstUpper()» extends React.Component {

	constructor(props) {
		super(props);
		this.onPress = this.onPress.bind(this);
	}
	
	onPress() {
		if (this.props.onPress) {
			this.props.onPress();
		}
	}
	
	render() {
		return (
			<TouchableHighlight onPress={this.onPress}>
				<View style={styles.container}>
					<Image style={styles.image} source={{uri: this.props.image}} />
					<Text style={styles.title}>{this.props.title}</Text>
				</View>
			</TouchableHighlight>
		);
	}
}
«ENDDEFINE»