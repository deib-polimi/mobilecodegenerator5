«IMPORT metamodel»

«EXTENSION app_extensions::Java-»

«DEFINE main FOR Application-»
«FILE name + "/App.js"-»
import React, { Component } from 'react';
import { createStore, applyMiddleware } from 'redux';
import RootReducer from './controller/RootReducer';
import thunk from 'redux-thunk';
import { Provider } from 'react-redux';
import { createStackNavigator, createDrawerNavigator } from 'react-navigation';
import { TouchableHighlight, YellowBox } from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import Device from 'react-native-device-detection';
«IF viewControllers.photocameraController.size > 0 || viewControllers.videocameraController.size > 0-»
import CameraView from './CameraView';
«ENDIF-»
«FOREACH scenes AS scene-»
«LET scene.name.replaceAll(" ", "_").toFirstUpper() AS sceneName-»
import Tablet_Scene_«sceneName-» from './scenes/Tablet_«sceneName-»';
import Phone_Scene_«sceneName-» from './scenes/Phone_«sceneName-»';
const Scene_«sceneName-» = Device.isTablet ? Tablet_Scene_«sceneName-» : Phone_Scene_«sceneName-»;
«ENDLET-»
«ENDFOREACH-»

const Menu = createDrawerNavigator({
	«FOREACH menu.menuItems AS item-»
		Scene_«item.navigation.destinationScene.name.replaceAll(" ", "_").toFirstUpper()-»: {
			screen: Scene_«item.navigation.destinationScene.name.replaceAll(" ", "_").toFirstUpper()-»,
			navigationOptions: () => {
				return {
					drawerLabel: '«item.title-»'
				}
			}
		},
	«ENDFOREACH-»
}, {
	«FOREACH menu.menuItems AS item-»
		«IF item.navigation.destinationScene.launcher-»
			initialRouteName: 'Scene_«item.navigation.destinationScene.name.replaceAll(" ", "_").toFirstUpper()-»'
		«ENDIF-»
	«ENDFOREACH-»
});

const AppStack = createStackNavigator({
	Menu: {
		screen: Menu,
    	navigationOptions: ({ navigation }) => {
      		return {
        		headerLeft: (
          			<TouchableHighlight underlayColor="#0000" onPress={navigation.toggleDrawer} style={{padding: 10}} >
            			<Icon name="menu" size={20} color="#000" />
          			</TouchableHighlight>
    			),
      		};
    	}
  	},
  	«FOREACH scenes AS scene-»
	«IF !isAMenuDestination(scene.name, menu.menuItems.navigation.destinationScene.name)-»
	Scene_«scene.name.replaceAll(" ", "_").toFirstUpper()-»,
	«ENDIF-»
	«ENDFOREACH-»
}, {
	«FOREACH scenes AS scene-»
	«IF scene.launcher && isAMenuDestination(scene.name, menu.menuItems.navigation.destinationScene.name)-»
	initialRouteName: 'Menu',
	«ELSEIF scene.launcher-»
	initialRouteName: 'Scene_«scene.name.replaceAll(" ", "_").toFirstUpper()-»',
	«ENDIF-»
	«ENDFOREACH-»
	navigationOptions: ({navigation}) => {
		return {
			title: '«name.toFirstUpper()-»',
		};
	}
});

«IF viewControllers.photocameraController.size > 0 || viewControllers.videocameraController.size > 0-»
const RootStack = createStackNavigator({
	Home: AppStack,
	Camera: CameraView
}, {
	mode: 'modal',
	headerMode: 'none'
});
«ELSE-»
const RootStack = AppStack;
«ENDIF-»

// Suppress useless warnings
YellowBox.ignoreWarnings(['Setting a timer']);

// Create store (redux)
const store = createStore(
	RootReducer,
	applyMiddleware(
		thunk
	)
)

export default class App extends Component {
  	render() {
		return (
			<Provider store={store}>
				<RootStack />
			</Provider>
		);
  	}
}

«ENDFILE-»
«ENDDEFINE-»