«IMPORT metamodel»

«DEFINE main FOR Application»
«FILE name + "/controller/utils/utils.js" »
export function ObjectWithoutKeys(obj, ...keys) {
    let newObj = obj;
    for (let i = 0; i < keys.length; i++) {
        delete newObj[keys[i]];
    }
    return newObj;
}

export function ObjectForEach(obj, iterator) {
    for (let k in obj) {
        iterator(obj[k], k, obj);
    }
}

export function ObjectMap(obj, mapper) {
    let newObj = {};
    for(let k in obj) {
        newObj[k] = mapper(obj[k], k, obj);
    }
}

export function ObjectFilter(obj, filter) {
    let newObj = {};
    for(let k in obj) {
        if (filter(obj[k], k, obj)) {
            newObj[k] = obj[k];
        }
    }
    return newObj;
}

export function MakeMapFromArray(arr, keyProperty) {
    let newObj = {};
    arr.forEach(item => newObj[item[keyProperty]] = item);
    return newObj;
}

function mergeObjectPathWorker(context, path, data) {
	if (path.length === 0) {
		return data;
	} else {
		return {
			...(context || {}),
			[path[0]]: mergeObjectPathWorker(context ? context[path[0]] : undefined, path.slice(1), data)
		};
	}
}

export function MergeObjectPath(context, path, data) {
    let o = mergeObjectPathWorker(context, path.split('/'), data);
    return o;
}

function readObjectPathWorker(context, path) {
	if (path.length === 0) {
		return context;
	} else if (typeof context !== 'object' || !context) {
		return undefined;
	} else {	
		return readObjectPathWorker(context[path[0]], path.slice(1));
	}
}

export function ReadObjectPath(context, path) {
	return readObjectPathWorker(context, path.split('/'));
}
«ENDFILE»
«ENDDEFINE»